1.	컴파일(Compile)과 런타임(Run-time)
이 둘은 소프트웨어 프로그램개발의 서로 다른 두 계층의 차이를 설명하기 위한 용어이다. 
a.	컴파일(Compile): 프로그램을 생성하기 위해 개발자는 첫째로 소스코드를 작성하고 컴파일이라는 과정을 통해 기계어코드로 변환 되어 실행 가능한 프로그램이 되며, 이러한 편집 과정을 컴파일타임 (Compiletime) 이라고 부른다.
b.	런타임(Runtime): 컴파일 과정을 마친 프로그램은 사용자에 의해 실행되어 지며, 이러한 응용프로그램이 동작되어지는 때를 런타임이라고 부른다
출처: What is the difference between runtime and compile time? (pc.net)

2.	캐스트에 대해서 – C 스타일, C++스타일
a.	static_cast: 형변환 체크를 run-time(런타임)이 아닌 compile-time(컴파일 타임)에 static(정적)으로 수행한다. C스타일 캐스터와 형변환 범위가 같은 기본적인 캐스트 연산자로 논리적으로 불가능한 캐스팅은 수행하지 못한다. 
	double, int  pointer(*) [X]
	double, int  struct [X]
	부모클래스  자식클래스 [X]
b.	dynamic_cast: 형변환 체크를 compile-time(컴파일 타임)이 아닌 run-time(런타임)에 dynamic(동적)으로 수행한다. dynamic_cast는 다형성을 이용하여 애매모호한 타입 캐스팅을 수행할 때, 잘못된 변환 결과가 넘어가지 않도록 방지하는 역할을 하는 캐스트이다. 대표적으로, (부모클래스  자식클래스)처럼 다운캐스팅이 가능한 캐스트이다.  
c.	const_cast: 상수성(constness)을 없애기도 하고 부여하기도 하는 캐스트이다. 
d.	reinterpret_cast: 



	WindowsAPIProgramming
일반적으로 윈도우 프로그램은 MS윈도우 운영체제 기반의 응용프로그램이다. 윈도우 API는 윈도우 응용 프로그램에서 필요한 기능을 라이브러리 함수 호출 형태로 사용한다. 응용 프로그램은 사용자 친화를 위한 GUI를 제공한다. (네트워크나 데이터베이스를 이용할 수 있다. )
-	GUI기반 프로그램: 생성한 윈도우의 메뉴, 툴바, 컨트롤을 시각적으로 보여 사용자에게 편의성을 제공함.
-	이벤트 기반 프로그램: 프로그램과 유저 사이의 발생하는 것을 이벤트라 한다 키보드나 마우스 등의 입력과 같은 모든 것을 이벤트라 한다 
-	멀티 스레드 기반 프로그램: 윈도우는 멀티 스레드 개념을 이용해 다수의 업무를 동시에 처리하며, 각종 자원을 공유한다. 
-	메인 부분( WINAPI WinMain 윈도우를 만들고 화면에 윈도우를 띄우는 등 모든 메시지를 전송하는 역할), 메시지 처리 부분( LRESULT CALLBACK WndProc 메시지를 받아 메시지에 약속된 반응을 보이는 부분, 마우스의 움직임이나 버튼 클릭에 따른 메시지 등 다양하다.)
	MFC(Microsoft Foundation Classes)
	윈도우 프로그램 메인 함수
-	윈도우 클래스를 만든다. 윈도우 클래스는 윈도우의 속성을 저장하는 구조체
-	구조체에 여러 속성을 저장한 후 이를 등록한다. 이때 윈도우 클래스를 하나 이상 등록할 수 있는데, 각각을 구분하려면 고유 이름이 필요. 윈도우 클래스를 등록하면 윈도우 클래스를 만들수 있다. 윈도우를 만들 때는 꼭 등록된 윈도우 클래스 중 하나를 사용할 클래스로 지정해야 함. 화면에 나타난 윈도우에서 다양한 이벤트가 발생하는데, 이에 대한 메세지는 커널에 의해 프로그램으로 보내진다. 여러 이벤트가 연속적으로 발생하므로 메세지는 메시지 큐에 차례로 저장됨 메시지 큐에서 메시지를 하나씩 처리한다. WndProc()함수에 보냄
 
 
	메시지 처리 
( 이벤트 발생  이벤트 감지  윈도우 시스템  메시지 전송  메시지 큐 winMain  winproc  메시지처리  화면에 출력 ) 
 while(GetMessage(&msg, NULL, 0, 0))  
{
	TranslateMessage(&msg); 
	DispatchMessage($msg); 
}
LRSEULT WndProc(){ 
	HWND hWnd;
	UINT   iMsg; 
	WPARAM wParam, 
	LPARAM  Iparam
} 
